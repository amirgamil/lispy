(define caar [x] (car (car x)))
(define cadr [x] (car (cdr x)))
(define cdar [x] (cdr (car x)))
(define cddr [x] (cdr (cdr x)))


; basic expressions
(define sqrt [x] (# x 0.5))
(define square [x] (* x x))
(define inc [x] (+ x 1))
(define dec [x] (- x 1))
(define abs [x] 
    (if (>= x 0) x (* x -1))
)
(define neg [x] (- 0 x))
(define ! [x] (if x false true))
(define neg? [x] (< x 0))
(define pos? [x] (> x 0))
(define zero? [x] (= x 0))
(define divisible? [a b] (= (% a b) 0))
(define even? [x] (zero? (% x 2)))
(define odd? [x] (! (even? x)))
(define nil? [x] (= x ()))
(define list? [x] (= (type x) "list"))
(define int? [x] (= (type x) "int"))
(define float? [x] (= (type x) "float"))
(define symbol? [x] (= (type x) "symbol"))

; list methods
(define range [start stop step]
    (if (< start stop)
        (cons start (range (+ start step) stop step))
        ()
    )
)


(define reduce [arr func current]
    (if (nil? arr)
        current
        (reduce (cdr arr) func (func current (car arr)))
    )
)


(define max [arr]
    (if (nil? arr) 
        0
        (reduce arr (fn [a b] (if (< a b) b a)) (car arr))
    )
)


(define min [arr]
    (if (nil? arr) 
        0
        (reduce arr (fn [a b] (if (> a b) b a)) (car arr))
    )
)

(define sum [arr]
    (if (nil? arr)
        0
        (reduce arr + 0)
    )
)

; defines a list from 0...x-1 
(define seq [x] (range 0 x 1))


(define map [arr func] 
    (if (nil? arr)
        ()
        (cons (func (car arr)) (map (cdr arr) func))
    )
)

(define filter [arr func]
    (if (nil? arr)
        ()
        (if (func (car arr))
            (cons (car arr) (filter (cdr arr) func))
            (filter (cdr arr) func)
        )
    )
)

; O(n) operation, loop through entire list and add to end
(define append [arr el]
    (if (nil? arr)
        (list el)
        (cons (car arr) (append (cdr arr) el))
    )
)

; O(n^2) since each append is O(n)
(define reverse [arr]
    (if (nil? arr)
        ()
        (append (reverse (cdr arr)) (car arr))
    )
)


(define each [arr func]
    (if (nil? arr)
        ()
        (
            do
            (func (car arr))
            (each (cdr arr) func)
        )
    )
)

; generate unique, not previously defined symbol
(define gensym []
    (symbol (* 1000 (rand)))
)

; macros

; (when (precondition) (postcondition))
(macro when [terms]
    (list 'if (car terms) (cadr terms))
)

; local bindings within lexical scope
(macro let [terms]
    (do
        (define decl (car terms))
        (define declname (car decl))
        (define declval (cdr decl))
        (define body (cdr terms))
        (list 
            (list 'fn [declname] body)
            declval
        )
        
    )
)

(macro quasiquote [terms]
    ; note we do cons 'list so that map is called when evaluating the macro-expansion, not on the first call
    (cons 'list 
        (map (car terms)
            (fn [term] 
                (if (list? term)
                    (if (= (car term) 'unquote) 
                        (cadr term)
                        (list 'quasiquote term)
                    ) 
                    (list 'quote term)
                )
            )
         )
    ) 
)

; (cond (precondition) (postcondition) (precondition2) (postcondition2)...)
(macro cond [terms]
    (if (nil? terms)
        ()
        (list 'if (car terms) (cadr terms) (cons 'cond (cddr terms)))
    )
)

; fix this using https://clojuredocs.org/clojure.core/-%3E
; note that with thread first, we put functions inner to outer
(macro -> [terms]
    (do
        (define apply-partials [partials expr]
            (if (nil? partials)
                expr
                (if (symbol? (car partials))
                    (list (car partials) (apply-partials (cdr partials) expr))
                    ; if it's a list with other parameters, insert expr as second parameter into partial
                    (list (caar partials) expr (cdar par))
                )
            )
        )
        (apply-partials )
    )
)


; immutable key-value hashmap 
; O(n) lookup with O(1) insert
; ex: (comp "key1" "val1" "key2" "val2")
(macro hash-map [terms]
    (if (nil? terms)
        ()
        (list 'cons (list 'cons (car terms) (cadr terms)) (cons 'hash-map (cddr terms)))
    )
)

; O(n) recursive lookup
(define get [hm key]
    (if (nil? hm)
        ()
        (if (= key (caar hm))
            (car (cdar hm))
            (get (cdr hm) key)
        )
    )
)

; hash-maps are immutable, add returns a new hash-map with the new key, val pair 
; it does not modify existing ones
(define add [hm key val]
    (cons (cons key val) hm)
)

; return list of keys in the hash-map
(define keys [hm]
    (if (nil? hm)
        ()
        (cons (caar hm) (keys (cdr hm)))
    )
)

; return list of values in the hash-map
(define values [hm]
    (if (nil? hm)
        ()
        (cons (car (cdar hm)) (values (cdr hm)))
    )
)





