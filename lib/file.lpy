(define caar [x] (car (car x)))
(define cadr [x] (car (cdr x)))
(define cdar [x] (cdr (car x)))
(define cddr [x] (cdr (cdr x)))


; basic expressions
(define sqrt [x] (# x 0.5))
(define inc [x] (+ x 1))
(define dec [x] (- x 1))
(define abs [x] 
    (if (>= x 0) x (* x -1))
)
(define ! [x] (if x false true))
(define neg? [x] (< x 0))
(define pos? [x] (> x 0))
(define zero? [x] (= x 0))
(define even? [x] (zero? (% x 2)))
(define odd? [x] (! even))
(define nil? [x]
    (= x ())
)
(define square [x] (* x x))


; list methods
(define range [start stop step]
    (if (< start stop)
        (cons start (range (+ start step) stop step))
        ()
    )
)

(nil? ())

(define reduce [list func current]
    (if (nil? list)
        current
        (reduce (cdr list) func (func current (car list)))
    )
)


(define max [list]
    (if (nil? list) 
        currMax
        (reduce list (fn [a b] (if (< a b) b a)) (car list))
    )
)


(define min [list]
    (if (nil? list) 
        currMax
        (reduce list (fn [a b] (if (> a b) b a)) (car list))
    )
)

; defines a list from 0...x-1 
(define seq [x] (range 0 x 1))

(define map [list func] 
    (if (nil? list)
        ()
        (cons (func (car list)) (map (cdr list) func))
    )
)




; macros

(macro when [terms]
    (list ,if (car terms) (cadr terms))
)

(macro let [terms]
    (do
        (define name (car terms))
        (define val (cdr terms))
        (list 
            (list ,fn (list name) val)
            val
        )
        
    )
)

(let a 5)
