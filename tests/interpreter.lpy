; metacircular lispy interpreter written in lispy
; Ch. 4 of Structure and Interpretation of Computer Programs, 2nd ed was helpful and Klisp (https://github.com/thesephist/klisp)

(define eval-expr [node env]
    (cond
        (nil? node) ()
        (int? node) node
        (float? node) node
        ; variable 
        (symbol? node) (get env node)

        ; list forms
        (list? node)
            (switch (car node)
                ('quote node)
                ('if 
                    (if (eval-expr (cadr node) env) 
                    (eval-expr (car (cddr node)) env)
                    (eval-expr (cadr (cddr node)) env))
                )
                ('define (add env (cadr node) (eval-expr (car (cddr node)) env)))
                ('fn
                    ((fn [x] ())
                    
                    )
                )


                ; evaluate function call
                ((car node)
                    (do
                        (define rator (car node))
                        (define rand (cdr node))
                        ; evaluate each item in rand
                        (apply rator rand)
                    )
                )
            )

        
    )
)



(define empty-env 
    (hash-map
        '+ +
        '- -
        '/ /
        '* *
        '= =
    )
)

(define eval [source]
    (eval-expr source empty-env)
)


(define repl-loop [line]
    (do
        (println "lispy> ")
        (define source (readline))
        (println (eval source))
        (repl-loop source)
    )
)
(repl-loop "")
;(eval '(define a 5))
;(eval '(* 1 2))
;(eval '5)
;(eval '6.0)
;(eval '(if (false) 5 6))



